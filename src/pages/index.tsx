/* eslint-disable @typescript-eslint/no-misused-promises */
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import { RxHamburgerMenu } from "react-icons/rx";

import { Socials } from "../components/socials";

interface Post {
  title: string;
  slug: string;
  dateAdded: string;
  brief: string;
}
type Publication = {
  posts: Post[];
};
type User = {
  publication: Publication;
};

const fetchPosts = async (page: number): Promise<Post[]> => {
  const headers = {
    "content-type": "application/json",
  };
  const requestBody = {
    query: `query  fetchPosts($page: Int) {
      user(username:"kasp9023") {
         publication {
          posts(page: $page) {
            title
            slug
            dateAdded
            brief
          }
        } 
      }
    }`,
    variables: {
      page,
    },
  };
  const options = {
    method: "POST",
    headers,
    body: JSON.stringify(requestBody),
  };

  const response = await fetch("https://api.hashnode.com", options);
  const data = (await response.json()) as { data: { user: User } };

  const {
    data: {
      user: {
        publication: { posts },
      },
    },
  } = data;

  return posts;
};

const Home = ({ posts }: { posts: Post[] }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [page, setPage] = useState(0);
  const [allPosts, setAllPosts] = useState(posts);
  const [isLoading, setIsLoading] = useState(false);

  const loadMorePosts = async () => {
    setIsLoading(true);
    const newPage = page + 1;
    const newPosts = await fetchPosts(newPage);
    setAllPosts([...allPosts, ...newPosts]);
    setPage(newPage);
    setIsLoading(false);
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div
        className={
          "fixed h-full bg-slate-200 md:mt-0 md:block md:w-64 " +
          (isOpen ? "block" : "hidden")
        }
      >
        <div className="mb-10 mt-12 flex w-full flex-col items-center justify-center px-4 pt-12">
          <Image
            width="120"
            height="120"
            className="mb-4 h-40 w-40 rounded-full bg-slate-200 p-1 dark:bg-white"
            alt="avatar"
            src="/profile-picture.jpg"
          />
          <h1
            className="leading-tighter text-md mb-4 font-extrabold tracking-tighter text-black dark:text-white md:text-2xl"
            data-aos="zoom-y-out"
          >
            Kasper Due
          </h1>
          <h3 className="mb-1 text-center text-sm text-black dark:text-white">
            👨🏻‍💻 Senior Software Engineer 👨🏻‍💻
          </h3>
          <h2 className="mb-4 text-center text-sm text-black dark:text-white">
            🏃 Aspiring Runner 🏃
          </h2>
          <Socials />
        </div>
      </div>
      <nav className="w-100 flex h-12 justify-end bg-slate-200 md:hidden">
        <button
          aria-label="Hamburger menu"
          className="mr-4 flex h-full w-12 items-center justify-center text-2xl"
          onClick={() => setIsOpen(!isOpen)}
        >
          <RxHamburgerMenu />
        </button>
      </nav>
      <section className="md:ml-64">
        <div className="mx-auto flex max-w-2xl flex-col items-center px-4 sm:px-6 md:pb-12">
          <div className="pt-12 md:pt-12">
            {allPosts &&
              allPosts.map((post) => <Post key={post.slug} post={post} />)}
          </div>
          <button
            type="button"
            onClick={() => loadMorePosts()}
            disabled={isLoading}
            className="mr-2 mb-2 rounded-lg border border-gray-200 bg-white py-2.5 px-5 text-sm font-medium text-gray-900 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white dark:focus:ring-gray-700"
          >
            Load More
          </button>
        </div>
      </section>
    </>
  );
};

function Post({ post }: { post: Post }) {
  return (
    <a
      href={`https://blog.kasperdue.com/${post.slug}`}
      rel="noref noreferrer"
      target="_blank"
    >
      <div className="d-flex mb-16">
        <h3 className="mb-4 text-4xl font-extrabold text-slate-800">
          {post.title}
        </h3>
        <p className="font-light text-slate-700">{post.brief}</p>
      </div>
    </a>
  );
}

export async function getServerSideProps() {
  const posts = await fetchPosts(0);
  return {
    props: {
      posts: posts || [],
    }, // will be passed to the page component as props
  };
}

export default Home;
